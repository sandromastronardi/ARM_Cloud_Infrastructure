{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environment": {
      "type": "string",
      "allowedValues": [ "Dev", "Test", "Acc", "Prod" ]
    },
    "location": {
      "type": "string"
    },
    "locationCode": {
      "type": "string"
    },
    "developerSuffix": {
      "type": "string",
      "defaultValue": ""
    },
    "servicePrefix": {
      "type": "string",
      "defaultValue": "Comp"
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Specifies the name of the key vault."
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "recover":{
      "type": "bool",
      "defaultValue":true
    },
    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      }
    }
  },
  "variables": {
    "serviceNamePrefix": "[concat(parameters('servicePrefix'),parameters('environment'),parameters('developerSuffix'),'-')]",
    "keyVaultName":"[concat(variables('serviceNamePrefix'),parameters('keyVaultName'),'-',parameters('locationCode'))]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "location": "[parameters('location')]",
      "name": "[variables('keyVaultName')]",
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "tenantId": "[parameters('tenantId')]",
        "sku": {
          "name": "[parameters('skuName')]",
          "family": "A"
        },
        /*"accessPolicies": [],*/
        "accessPolicies":"[if(parameters('recover'),null(),json('[]'))]",
        "createMode":"[if(parameters('recover'),'recover','default')]",
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    }
  ],
  "outputs":{
    "keyVaultName":{
      "type":"string",
      "value":"[variables('keyVaultName')]"
    },
    "keyVaultUrl":{
      "type":"string",
      "value":"[concat(variables('keyVaultName'),environment().suffixes.keyvaultDns)]"
    }
  }
}