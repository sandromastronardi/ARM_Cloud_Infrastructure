{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environment": {
      "type": "string",
      "allowedValues": [ "Dev", "Test", "Staging", "Prod" ]
    },
    "serviceName": {
      "type": "string"
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "The name of the database to create"
      },
      "defaultValue":"main"
    },
    "databaseCollation": {
      "type": "string",
      "metadata": {
        "description": "The collation for the database"
      },
      "defaultValue":"SQL_Latin1_General_CP1_CI_AS"
    },
    "sqlEdition": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "The type of database to create."
      }
    },
    "sqlMaxSizeBytes": {
      "type": "string",
      "defaultValue": "2147483648",
      "metadata": {
        "description": "The maximum size, in bytes, for the database"
      }
    },
    "sqlPerformanceLevel": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "S0",
        "S1",
        "S2",
        "P1",
        "P2",
        "P3"
      ],
      "metadata": {
        "description": "Describes the performance level for Edition"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "locationCode": {
      "type": "string"
    },
    "developerSuffix": {
      "type": "string",
      "defaultValue": ""
    },
    "servicePrefix": {
      "type": "string",
      "defaultValue": "CompanyName-"
    },
    "usageRegions": {
      "type": "array",
      "metadata": {
        "description": "The regions that use this database"
      }
    },
    "keyVaultPrefix": {
      "type": "string",
      "defaultValue":"Comp"
    }
  },
  "variables": {
    "serverNamePrefix": "[concat(parameters('servicePrefix'),parameters('environment'),parameters('developerSuffix'),'-')]",
    "serverName":"[tolower(concat(variables('serverNamePrefix'),parameters('locationCode')))]",
    "databaseName":"[concat(parameters('serviceName'),'-',parameters('databaseName'))]",
    "elasticPoolname":"CompanyName-Pool",
    "databaseRg": "[concat('CompanyName.',parameters('environment'),parameters('developerSuffix'),'.',parameters('locationCode'))]",
    "keyVaultRg": "[concat('CompanyName.',parameters('environment'),parameters('developerSuffix'),'.',parameters('locationCode'))]",
    "keyVaultRgPrefix": "[concat('CompanyName.',parameters('environment'),parameters('developerSuffix'),'.')]",
    "keyVaultName": "[concat(parameters('keyVaultPrefix'),parameters('environment'),parameters('developerSuffix'),'-Main-',parameters('locationCode'))]",
    "keyVaultNamePrefix": "[concat(parameters('keyVaultPrefix'),parameters('environment'),parameters('developerSuffix'),'-Main-')]",
    "tags": {
      "service": "[parameters('serviceName')]",
      "locationCode": "[parameters('locationCode')]",
      "environment": "[parameters('environment')]"
    }
  },
  "resources": [
    /*
    {
      "apiVersion": "2014-04-01",
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', variables('serverName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[concat(variables('serverName'), '/', variables('elasticPoolName'))]",
      "properties": {
        "edition": "[parameters('edition')]",
        "dtu": "[parameters('poolDtu')]",
        "databaseDtuMin": "[parameters('databaseDtuMin')]",
        "databaseDtuMax": "[parameters('databaseDtuMax')]"
      },
      "type": "Microsoft.Sql/servers/elasticPools"
    },*/
    {
      "type": "Microsoft.Sql/servers/databases",
      "name": "[concat(variables('serverName'), '/', variables('databaseName'))]",
      "location": "[parameters('location')]",
      "apiVersion": "2014-04-01-preview",
      "dependsOn": [
        /*"[concat('Microsoft.Sql/servers/', variables('serverName'))]"
        "[concat('Microsoft.Sql/servers/', variables('serverName') ,'/elasticpools/', variables('elasticPoolName'))]"*/
      ],
      "properties": {
        "collation": "[parameters('databaseCollation')]"/*,
        /*"requestedServiceObjectiveName": "ElasticPool",
        "elasticPoolName": "[variables('elasticPoolName')]"*/,
        "edition": "[parameters('sqlEdition')]",
        "maxSizeBytes": "[parameters('sqlMaxSizeBytes')]",
        "requestedServiceObjectiveName": "[parameters('sqlPerformanceLevel')]"
      },
      "tags": "[variables('tags')]"
    },
    {
      "copy": {
        "name":"multiRegionSecrets",
        "count":"[length(parameters('usageRegions'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
      ],
      "apiVersion": "2020-06-01",
      "name": "[concat(concat(deployment().name,'-deploySecrets-',parameters('usageRegions')[copyIndex()].locationCode))]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[concat(variables('keyVaultRgPrefix'),parameters('usageRegions')[copyIndex()].locationCode)]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "location": {
            "value": "[parameters('usageRegions')[copyIndex()].location]"
          },
          "usageRegions": {
            "value": "[parameters('usageRegions')]"
          },
          "tags":{
            "value":"[variables('tags')]"
          },
          "keyVaultName": {
            "value":"[concat(variables('keyVaultNamePrefix'),parameters('usageRegions')[copyIndex()].locationCode)]"
          },
          "serverName": {
            "value": "[variables('serverName')]"
          },
          "databaseName":{
            "value":"[variables('databaseName')]"
          },
          "databaseResourceGroup":{
            "value":"[variables('databaseRg')]"
          },
          "adminLogin": {
            "reference": {
              "keyVault": { /*Get Login from KV in same region as sqlserver */
                "id": "[resourceId(concat(variables('keyVaultRg')), 'Microsoft.KeyVault/vaults', concat(variables('keyVaultName')))]"
              },
              "secretName": "SqlAdminLogin"
            }
          },
          "adminPassword": {
            "reference": {
              "keyVault": { /*Get Password from KV in same region as sqlserver */
                "id": "[resourceId(concat(variables('keyVaultRg')), 'Microsoft.KeyVault/vaults', concat(variables('keyVaultName')))]"
              },
              "secretName": "SqlAdminPassword"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "location": {
              "type": "string"
            },
            "usageRegions":{
              "type": "array"
            },
            "tags": {
              "type": "object"
            },
            "keyVaultName": {
              "type": "string"
            },
            "serverName": {
              "type": "string"
            },
            "databaseName": {
              "type": "string"
            },
            "databaseResourceGroup": {
              "type": "string"
            },
            "adminLogin":{
              "type":"securestring"
            },
            "adminPassword": {
              "type": "securestring"
            }
          },
          "variables": {
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[concat(parameters('keyVaultName'), '/', parameters('databaseName'),'-ConnectionString')]",
              "location": "[parameters('location')]",
              "dependsOn": [
                
              ],
              "properties": {
                "value": "[concat('Data Source=', reference(resourceId(parameters('databaseResourceGroup'),concat('Microsoft.Sql/servers'), parameters('serverName')),'2020-02-02-preview').fullyQualifiedDomainName, ';Initial Catalog=', parameters('databaseName'), ';Integrated Security=False;User ID=', parameters('adminLogin'), ';Password=', parameters('adminPassword'), ';Connect Timeout=15;Encrypt=True;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False')]",
/*                "value": "[listKeys(resourceId('Microsoft.Sql/servers/databases', concat(variables('serverNamePrefix'),parameters('usageRegions')[copyIndex()].locationCode)), '2016-04-01').primaryKey]",*/
                "contentType":"text/plain"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[concat(parameters('keyVaultName'), '/', parameters('databaseName'),'-ROConnectionString')]",
              "location": "[parameters('location')]",
              "dependsOn": [
                
              ],
              "properties": {
                "value": "[concat('Data Source=', reference(resourceId(parameters('databaseResourceGroup'),concat('Microsoft.Sql/servers'), parameters('serverName')),'2020-02-02-preview').fullyQualifiedDomainName, ';Initial Catalog=', parameters('databaseName'), ';Integrated Security=False;User ID=', parameters('adminLogin'), ';Password=', parameters('adminPassword'), ';Connect Timeout=15;Encrypt=True;TrustServerCertificate=False;ApplicationIntent=ReadOnly;MultiSubnetFailover=False')]",
/*                "value": "[listKeys(resourceId('Microsoft.Sql/servers/databases', concat(variables('serverNamePrefix'),parameters('usageRegions')[copyIndex()].locationCode)), '2016-04-01').primaryKey]",*/
                "contentType":"text/plain"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "connectionString": {
              "type": "string",
              "value": "[concat('Data Source=', reference(resourceId(parameters('databaseResourceGroup'),concat('Microsoft.Sql/servers'), parameters('serverName')),'2020-02-02-preview').fullyQualifiedDomainName, ';Initial Catalog=', parameters('databaseName'), ';Integrated Security=False;User ID=', parameters('adminLogin'), ';Password=', parameters('adminPassword'), ';Connect Timeout=15;Encrypt=True;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False')]"
            },
            "roConnectionString": {
              "type": "string",
              "value": "[concat('Data Source=', reference(resourceId(parameters('databaseResourceGroup'),concat('Microsoft.Sql/servers'), parameters('serverName')),'2020-02-02-preview').fullyQualifiedDomainName, ';Initial Catalog=', parameters('databaseName'), ';Integrated Security=False;User ID=', parameters('adminLogin'), ';Password=', parameters('adminPassword'), ';Connect Timeout=15;Encrypt=True;TrustServerCertificate=False;ApplicationIntent=ReadOnly;MultiSubnetFailover=False')]"
            },
            "sqlLogin":{
              "type":"string",
              "value":"[parameters('adminLogin')]"
            },
            "sqlPassword":{
              "type":"string",
              "value":"[parameters('adminPassword')]"
            },
            "sqlDatabaseName": {
              "type": "string",
              "value":"[parameters('databaseName')]"
            },
            "sqlServerHost": {
              "type": "string",
              "value":"[reference(resourceId(parameters('databaseResourceGroup'),concat('Microsoft.Sql/servers'), parameters('serverName')),'2020-02-02-preview').fullyQualifiedDomainName]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "connectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments',concat(concat(deployment().name,'-deploySecrets-',parameters('locationCode'))))).outputs.connectionString.value]"
    },
    "roConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments',concat(concat(deployment().name,'-deploySecrets-',parameters('locationCode'))))).outputs.roConnectionString.value]"
    },
    "sqlServerHost":{
      "type": "string",
      "value":"[reference(resourceId('Microsoft.Resources/deployments',concat(concat(deployment().name,'-deploySecrets-',parameters('locationCode'))))).outputs.sqlServerHost.value]"
    },
    "sqlDatabaseName": {
      "type": "string",
      "value":"[reference(resourceId('Microsoft.Resources/deployments',concat(concat(deployment().name,'-deploySecrets-',parameters('locationCode'))))).outputs.sqlDatabaseName.value]"
    },
    "sqlLogin": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments',concat(concat(deployment().name,'-deploySecrets-',parameters('locationCode'))))).outputs.sqlLogin.value]"
    },
    "sqlPassword": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments',concat(concat(deployment().name,'-deploySecrets-',parameters('locationCode'))))).outputs.sqlPassword.value]"
    }
  }
}
